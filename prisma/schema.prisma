// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Employee {
  id       String @id @default(uuid())
  userId   String @unique
  imageUrl String @db.Text
  name     String
  email    String @unique
  phone    String

  designationId String?
  designation   Designation? @relation(fields: [designationId], references: [id], onDelete: SetNull)

  managedTimeLines   TimeLine[] @relation("MaintManager") // Maintenance manager for timelines
  shiftTimeLines     TimeLine[] @relation("ShiftEngineer") // Shift engineer for timelines
  operationTimeLines TimeLine[] @relation("OperationEngineer") // Operation junior engineer for timelines

  wrAddedBy   WorkRequest[] @relation("wrCreatedBy")
  wrIssuedTo  WorkRequest[] @relation("wrIssuedTo")
  roles       Role[]        @relation("UserRoles")
  permissions Permission[]  @relation("UserPermissions")

  verified  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Department {
  id           String        @id @default(uuid())
  name         String        @unique
  shortName    String
  designations Designation[]
}

model Designation {
  id           String     @id @default(uuid())
  title        String
  shortTitle   String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  employees Employee[]

  @@unique([departmentId, title])
}

enum Mode {
  NORMAL
  STRICT
}

enum Status {
  PLACED
  PENDING
  ONGOING
  FINISHED
  DONE
  UNDER_OBSERVATION
  NOT_SOLVED
  FOLLOW_UP
}

enum WrType {
  ELECTRICAL
  MECHANICAL
}

model Area {
  id       String  @id @default(cuid())
  name     String
  parentId String?
  parent   Area?   @relation("AreaParent", fields: [parentId], references: [id])
  children Area[]  @relation("AreaParent")

  workRequest WorkRequest[]
  createdAt   DateTime      @default(now())
}

model WorkRequest {
  id                    String    @id @default(cuid())
  wrNo                  String    @unique //auto generated short id no which will be displayed everywhere
  title                 String
  type                  WrType // whether it is mechanical work or electrical
  status                Status    @default(PLACED)
  maintEngrId           String? // an employee, name, imgurl, designation, department will be provided
  workStartedAt         DateTime? // timestamp when status set to "ONGOING"
  workFinishConfrimedAt DateTime? // timestamp when status set to "DONE"
  remarks               String? // after maintanance work done, it will hold any information about the work
  mode                  Mode      @default(NORMAL) // for internal used case, if "STRICT", wr will be maintained strictly
  runningHour           String? // equipment running hour
  referredFromId        String? // sometime problem not solved, it will hold the parent wr ID
  referredToId          String? // it will hold child wr ID
  creatorId             String // who created the work request,an employee, name, imgurl, designation, department will be provided
  areaId                String // location of equipment of the work

  creator          Employee      @relation("wrCreatedBy", fields: [creatorId], references: [id])
  maintEngr        Employee?     @relation("wrIssuedTo", fields: [maintEngrId], references: [id])
  area             Area          @relation(fields: [areaId], references: [id])
  referredFrom     WorkRequest?  @relation("ReferredWorkRequest", fields: [referredFromId], references: [id])
  referredTo       WorkRequest?  @relation("ReferredWorkTo", fields: [referredToId], references: [id])
  extendedRequests WorkRequest[] @relation("ReferredWorkRequest")
  followUpRequests WorkRequest[] @relation("ReferredWorkTo") // Add reverse relation for `referredTo`
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  timelines        TimeLine[]    @relation("WorkRequestTimeline")
}

model TimeLine {
  id                   String    @id @default(cuid())
  wrId                 String // Work request ID (strict mode)
  maintManagerId       String? // Manager ID for assigning a maintenance engineer
  maintEngrAssignedAt  DateTime? // Assigned time for tracking WR status
  shiftEngrId          String? // Assigned maintenance engineer for shift
  opEngrId             String? // Assigned field operation junior engineer
  opEngrAssignedAt     DateTime? // For tracking purposes
  isolationConfirmedAt DateTime? // Field engineer confirms isolation, WR status becomes 'ONGOING'
  workDoneAt           DateTime? // Maintenance engineer confirms the work is done

  // Relations
  workRequest       WorkRequest @relation("WorkRequestTimeline", fields: [wrId], references: [id])
  maintManager      Employee?   @relation("MaintManager", fields: [maintManagerId], references: [id]) // Relation to the maintenance manager
  shiftEngineer     Employee?   @relation("ShiftEngineer", fields: [shiftEngrId], references: [id]) // Relation to shift engineer
  operationEngineer Employee?   @relation("OperationEngineer", fields: [opEngrId], references: [id]) // Relation to operation junior engineer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PermissionName {
  CREATE_WR
  VIEW_WR
  DELETE_WR
}

enum RoleName {
  ControlRoom
  ShiftIncharge
  Employee
  OPEngr
  MMEngr
  EMEngr
  OPManager
  MManager
  EManager
  DGM
}

model Role {
  id          String       @id @default(cuid()) // unique id for the role
  name        RoleName     @unique // the role's name, e.g., "Admin", "Employee"
  permissions Permission[] @relation("RolePermissions") // many-to-many relation with permissions
  employees   Employee[]   @relation("UserRoles") // many-to-many relation with employees
}

model Permission {
  id        String         @id @default(cuid()) // unique id for permission
  name      PermissionName @unique // permission name, e.g., "CREATE_WR", "VIEW_WR"
  roles     Role[]         @relation("RolePermissions") // many-to-many relation with roles
  employees Employee[]     @relation("UserPermissions")
}
